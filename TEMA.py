# # enumerate ‚Äî –¥–∞—ë—Ç –∏–Ω–¥–µ–∫—Å + —ç–ª–µ–º–µ–Ω—Ç
# fruits = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≥—Ä—É—à–∞"]
# for i, fruit in enumerate(fruits, start=1):
#     print(i, fruit)
# # 1 —è–±–ª–æ–∫–æ
# # 2 –±–∞–Ω–∞–Ω
# # 3 –≥—Ä—É—à–∞
# # üõ† –ü—Ä–∏–≥–æ–¥–∏—Ç—Å—è: –∫–æ–≥–¥–∞ –Ω–∞–¥–æ –Ω—É–º–µ—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–≤–æ–¥ –º–µ–Ω—é –∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã).
#

# /===/
#
# # filter ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ —É—Å–ª–æ–≤–∏—é
# nums = [1, 2, 3, 4, 5]
# even = list(filter(lambda x: x % 2 == 0, nums))
# print(even)  # -> [2, 4]
# # üõ† –ü—Ä–∏–≥–æ–¥–∏—Ç—Å—è: –æ—Ç–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –±–∞–∑—ã).
#
# /===/
#
# # map ‚Äî –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
# nums = [1, 2, 3]
# squared = list(map(lambda x: x**2, nums))
# print(squared)  # -> [1, 4, 9]
# # üõ† –ü—Ä–∏–≥–æ–¥–∏—Ç—Å—è: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä).
#

# /===/



# a = []
# for i in range(99):
#     if i % 2 == 0:
#         a.append(i)
# print(a)
# b = [i  if i % 2 == 0 else print('—ç—Ç–æ –Ω–µ—á–µ—Ç–Ω–æ–µ') for i in range(99)]
# print(b)

# spisok = [i for i in range(0, 101, 5)]
# print(spisok)

# # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
# class Animal:
#     def __init__(self, name):
#         self.name = name
#
#     def speak(self):
#         return "–Ø –∏–∑–¥–∞—é –∑–≤—É–∫"
#
#
# # –î–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å (–Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Animal)
# class Dog(Animal):
#     def speak(self):
#         return f"{self.name} –≥–æ–≤–æ—Ä–∏—Ç: –ì–∞–≤-–≥–∞–≤!"
#
#
# # –ï—â—ë –æ–¥–∏–Ω –¥–æ—á–µ—Ä–Ω–∏–π –∫–ª–∞—Å—Å
# class Cat(Animal):
#     def speak(self):
#         return f"{self.name} –≥–æ–≤–æ—Ä–∏—Ç: –ú—è—É!"
#
#
# # –ò—Å–ø–æ–ª—å–∑—É–µ–º
# dog = Dog("–ë–æ–±–∏–∫")
# cat = Cat("–ú—É—Ä–∫–∞")
#
# print(dog.speak())  # –ë–æ–±–∏–∫ –≥–æ–≤–æ—Ä–∏—Ç: –ì–∞–≤-–≥–∞–≤!
# print(cat.speak())  # –ú—É—Ä–∫–∞ –≥–æ–≤–æ—Ä–∏—Ç: –ú—è—É!

# class BankAccount:
#     def __init__(self, owner, balance):
#         self.owner = owner        # –ø—É–±–ª–∏—á–Ω–æ–µ
#         self._balance = balance   # –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ
#         self.__pin = "1234"       # –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
#
#     def deposit(self, amount):
#         self._balance += amount
#         return f"–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å: {self._balance}"
#
#     def withdraw(self, amount, pin):
#         if pin == self.__pin:
#             if amount <= self._balance:
#                 self._balance -= amount
#                 return f"–í—ã —Å–Ω—è–ª–∏ {amount}. –û—Å—Ç–∞—Ç–æ–∫: {self._balance}"
#             else:
#                 return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"
#         else:
#             return "–ù–µ–≤–µ—Ä–Ω—ã–π PIN"
#
# acc = BankAccount("–ü–∞—à–∞", 1000)
# acc.owner = "Marselos"
# print(acc.owner)
# acc._balance = 100
# print(acc._balance)
# acc.__pin = "4444"
# print(acc.__pin)
#
#
#
#
#
#
#
#
#
# print(acc.deposit(500))              # –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω, —Ç–µ–ø–µ—Ä—å: 1500
# print(acc.withdraw(300, "1234"))     # –í—ã —Å–Ω—è–ª–∏ 300. –û—Å—Ç–∞—Ç–æ–∫: 1200
#
# print(acc.owner)      # –ü—É–±–ª–∏—á–Ω–æ–µ ‚Üí –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
# print(acc._balance)   # –ú–æ–∂–Ω–æ, –Ω–æ –ª—É—á—à–µ –Ω–µ —Ç—Ä–æ–≥–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
# # print(acc.__pin)    # –û—à–∏–±–∫–∞! –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ
#
# # –ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ–Ω–æ —Å–ø—Ä—è—Ç–∞–Ω–æ –∫–∞–∫ _BankAccount__pin
# print(acc._BankAccount__pin)  # 1234 (–Ω–æ —Ç–∞–∫ –ª—É—á—à–µ –Ω–µ –¥–µ–ª–∞—Ç—å!)
#


# class Hero:
#     def attack(self):
#         return "–ì–µ—Ä–æ–π –∞—Ç–∞–∫—É–µ—Ç!"
#
#
# class Knight(Hero):
#     def attack(self):
#         return "–†—ã—Ü–∞—Ä—å –º–∞—à–µ—Ç –º–µ—á–æ–º ‚öîÔ∏è"
#
#
# class Archer(Hero):
#     def attack(self):
#         return "–õ—É—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–µ—Ç –∏–∑ –ª—É–∫–∞ üèπ"
#
#
# class Wizard(Hero):
#     def attack(self):
#         return "–ú–∞–≥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä üî•"
#

# class Plant:
#     self.hp = ...
#
#     def update(self):
#     def kill(self):
#
# class SunFlower(Plant):
#     pass
#
# class PeaShooter(Plant):
#     pass
#
# plant1 = PLant()